<?php

/**
 * Implements hook_block_info().
 */
function test_block_block_info() {
  $blocks = array();
  $blocks['my_block'] = array(
    'info' => t('Test Block'),
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
/**
* hook_block_configure() :можно добавить дополнительные элементы, отображаемые при настройке блока. 
*                         В данном случае это поле для загрузки изображения #managed_file и текстовое поле #text_format, но вы, если потребуется, 
*                         можете добавить те поля, которые вам заблагорассудится. Список доступных типов полей вы можете найти на странице Form API Reference.
*/
function test_block_block_configure($delta = '') {
  $form = array();

  switch ($delta) {
    case 'my_block' :
// Text field form element
      $form['text_body'] = array(
              '#type' => 'text_format',
              '#title' => t('Enter your text here in WYSIWYG format'),
              '#default_value' => variable_get('text_variable', ''),
      );

// Select file form element
      $form['file'] = array(
      '#name' => 'block_image',
      '#type' => 'managed_file',
      '#title' => t('Choose an Image File'),
      '#description' => t('Please select image. Only *.gif, *.png, *.jpg, and *.jpeg images allowed.'),
      '#default_value' => variable_get('test_block_image_fid', ''),
      '#upload_location' => 'public://',
      '#upload_validators' => array(
        'file_validate_extensions' => array('gif png jpg jpeg'),
      ),
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
 /**
 * variable_set :Устанавливает постоянную переменную variable_set($name, $value).
 *Для того, чтоб сохранить изображение, следует :Создать обьект $file для загруженного файла. Делается это с помощью функции file_load().
 *                                               Дальше нужно установить статус файла FILE_STATUS_PERMANENT (нонстанта, равная одному). 
 *                                               Изначально, после загрузки файла через виджет #managed_file, файл имеет статус FILE_STATUS_TEMPORARY 
 *                                               и удаляется по прошествии времени DRUPAL_MAXIMUM_TEMP_FILE_AGE.  
 *Далее, используя функцию file_save(), следует сохранить обновленный обьект $file в базе.Для того, чтоб указать системе, что файл используется блоком, 
 *следует воспользоваться функцией file_usage_add(). Это предотвратит удаление файла, в случае вызова функции file_delete(). В обычном режиме, удален может быть файл, 
 *который не имеет записей в таблице file_usage. Один из параметров, принимаемых функцией file_usage_add() является идентификатор блока, поэтому, 
 *чтоб получить этот идентификатор, следует вызвать функцию block_load(). Ну и напоследок, когда запись про использование файла сделана, используя функцию variable_set()
 *следует сохранить информацию про изображение. 
 */
function test_block_block_save($delta  ='', $edit = array()) {
  switch ($delta) {
    case 'my_block' :
// Saving the text element value
      variable_set('text_variable' , $edit['text_body']['value']);

// Changing file to a permanent state
      $file = file_load($edit['file']);
      $file->status = FILE_STATUS_PERMANENT;
      file_save($file);
// Adding usage for file. Saving information about image.
      $block = block_load('test_block ', $delta);
      file_usage_add($file, 'test_block ', 'block ', $block->bid);
      variable_set('test_block_image_fid', $file->fid);
      break;
  }
}

/**
 * Implements hook_block_view().
 */
function test_block_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'my_block' :
      $block['content'] = my_block_view();
      break;
  }

  return $block;
}

/**
 * Assemble renderable array for test block content.
 * @return
 * returns a renderable array of block content.
 */
function my_block_view() {
  $block = array();

// Capture the image file path and convert into HTML with some css attributes
  $image_file = file_load(variable_get('test_block_image_fid', ''));
  $image_path = '';

  if (isset($image_file->uri)) {
    $image_path = $image_file->uri;
  }

  $image = theme_image(array(
      'path' => ($image_path),
      'alt' => t('Image description.'),
      'title' => t('This is our block image title.'),
      'attributes' => array('class' => 'class_name'),
  ));

// Load text from variable
  $text = variable_get('text_variable', '');

// Block output in HTML with div wrappers around elements
  $block = array(
      'message' => array(
		  '#prefix' => '<div>',
          '#type' => 'markup',
          '#markup' => $text,
          '#suffix' => '</div>',
      ),
      'image' => array(
          '#prefix' => '<div>',
          '#type' => 'markup',
          '#markup' => $image,
		  '#suffix' => '</div>',
      ),
  );

  return $block;
}
/**
* hook_block_configure() :можно добавить дополнительные элементы, отображаемые при настройке блока. 
*                         В данном случае это поле для загрузки изображения #managed_file и текстовое поле #text_format, но вы, если потребуется, 
*                         можете добавить те поля, которые вам заблагорассудится. Список доступных типов полей вы можете найти на странице Form API Reference.
*/