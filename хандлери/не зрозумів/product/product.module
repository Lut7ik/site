<?php
/**
 * @file
 * Code for the product module.
 */

/**
 * Implements hook_entity_info().
 */
function product_entity_info() {
	$info = array();
	// "product" - машинне ім'я нашої сутності.
	$info['product'] = array(
		// label - задає ім'я сутності, що зручне для сприяння людиною (human-readable).
		'label' => t('Mailing list'),
		// Базова таблиця в БД для нашої сутності.
		'base table' => 'product',
		// Властивості сутності що її ідентифікують.
		'entity keys' => array(
			// Вказуємо PRIMARY KEY нашої таблиці.
			'id' 		=> 'id',
		),
		// Машинне ім'я модуля, в якому реалізована сутність.
		'module' => 'product',
		'entity class' => 'Entity',
		'controller class' => 'EntityAPIController',
	);

	return $info;
}

/**
 * Implements hook_menu().
 */
function product_menu() {
	$items = array();
	// "custom-entity" - внутрішній адрес сторінки в Drupal.
	$items['custom-entity'] = array(
		// Заголовок сторінки.
		'title'						=> t('Custom entity'),
		// Функція яка формує контент сторінки.
		'page callback' 	=> 'drupal_get_form',
		'page arguments' => array('custom_entity_page'),
		// Сторінка буде доступна для всіх.
		'access callback'	=> TRUE,
		// Тип меню.
		'menu_title'				=> 'main-menu',
	);
	
	$items['custom-entity/1'] = array(
		// Заголовок сторінки.
		'title'						=> t('Custom entity/1'),
		// Функція яка формує контент сторінки.
		'page callback' 	=> 'product_show_table',
		
		// Сторінка буде доступна для всіх.
		'access callback'	=> TRUE,
		// Тип меню.
		'menu_title'				=> 'main-menu',
	);
	
	$items['product/%/delete'] = array(
  'title callback' => 'product_delete_page_title',
  'title arguments' => array(1),
  'page callback' => 'drupal_get_form',
  'page arguments' => array('product_delete_form', 1),
  'access arguments' => array('administer site configuration'),
);

	return $items;
}

/**
 * Add or edit our entity.
 */
function custom_entity_page($form, $form_state) {
	$form = array();
	$entities = entity_load('product', FALSE, array('title' => 'admin'));
	if (!empty($entities)) {
		$entities = reset($entities);
	}
	// Формуємо поля форми із значеннями по замовчуванню.
	$form['title'] = array(
		'#type' => 'textfield',
		'#title' => t('title'),
		'#required' => TRUE,
		'#default_value' => isset($entities->title)? $entities->title: '',
	);
	
	if (isset($entities->time)) {
		$form['updated'] = array(
			'#type' => 'markup',
			'#markup' => date('d.m.Y / H:i:s', $entities->time),
			'#prefix' => '<strong>' . t('Updated: ') . '</strong>',
			'#suffix' => '<br />',
		);
	}
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
	);
	return $form;
}

/**
 * Submit handler for custom_entity_page().
 */
function custom_entity_page_submit($form, &$form_state) {
	$title = trim($form_state['values']['title']);
	// Перевіряємо, чи існує користувач у списку розсилки.
	$entity = entity_load('product', FALSE, array('title' => $title));
	if (empty($entity)) {
		// Створюємо користувача, якщо він відсутній.
		$entity = entity_create('product', array());
	  $entity->title = $title;
		  $entity->time = time();
	  $entity->save();
	  drupal_set_message(t('Сутність створeно.'), 'status');
	}
	else {
		// Оновлюємо інформацію про користувача,
		// якщо користувач вже є в системі.
		$entity = reset($entity);
		$entity->title = $title;
	 	  $entity->time = time();
	  $entity->save();
		drupal_set_message(t('Сутність оновлено.'), 'status');
	}
}
/**
 * Menu callback для url "custom-entity"
 */
function product_show_table()
{
$header = array(
    'title' => array('data' => t('title'), 'field' => 'm.title'),
      	'operations' => array('data' => t('Operations')),
  );	
$products = db_select('product', 'm')->extend('PagerDefault')->extend('TableSort')
->fields('m', array('id','title'))->limit(3)
->orderBy('m.id')->execute();
$destination = drupal_get_destination();
$rows = array();
 
while ($value = $products->fetchAssoc()) {
  $rows[] = array(
  $value['title'], 
  l(t('Delete'), "product/{$value['id']}/delete")
  );
}
 $output = theme('table', array('header' => $header, 'rows' => $rows));
 $page = array();
  $page['product'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No product available.'),
  );
 
  $page['pager'] = array('#markup' => theme('pager'));
  return $page;
}
function product_delete_page_title($id) {
  $placeholders = array(':id' => $id);
  $number = db_query("SELECT `id` FROM {product} WHERE `id` = :id", $placeholders)->fetchField();
  return t('Are you sure you want to delete item with number "@id"?', array('@id' => $number));
}
function product_delete_form($form, $form_state) {
  $form = array();
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  $form['cancel'] = array(
    '#markup' => l(t('Cancel'), 'product'),
  );
  return $form;
}
function product_delete_form_submit($form, &$form_state) {
  $id = $form_state['build_info']['args'][0];
  $result = db_delete('product')
    ->condition('id', $id)
    ->execute();
  $placeholders = array('@id' => $id);
  if ($result) {
    drupal_set_message(t('Record @id successfully removed.', $placeholders));
  }
  else {
    drupal_set_message(t('Record @id is undefined.', $placeholders), 'warning');
  }
  $form_state['redirect'] = 'custom-entity/1';
}
/**
 * Implements hook_views_api().
 */
function product_views_api() {
  return array(
    'api' => 3,
  );
}